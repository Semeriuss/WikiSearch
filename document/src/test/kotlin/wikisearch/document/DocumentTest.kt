/*
 * This Kotlin source file was generated by the Gradle "init" task.
 */
package wikisearch.document

import org.junit.jupiter.api.Test

import org.junit.jupiter.api.Assertions.*

class DocumentTest {
    @Test fun testTermFrequency() {
        val doc = Document(3, "Supervised Learning", "Wikipedia: Supervised learning, brief=Supervised learning (SL) is a machine learning paradigm for problems where the available data consists of labeled examples, meaning that each data point contains features (covariates) and an associated label. The goal of supervised learning algorithms is learning a function that maps feature vectors (inputs) to labels (output), based on example input-output pairs.","https://en.wikipedia.org/wiki/Supervised_learning")

        val frequencyCounter = mutableMapOf<String, Int>()
        for (token in (doc.title + " " + doc.brief).lowercase().split(" ")) {
            if (frequencyCounter.containsKey(token)) {
                frequencyCounter[token] = frequencyCounter[token]!! + 1
            }
            else {
                frequencyCounter[token] = 1
            }
        }
        doc.frequencyMap = frequencyCounter

        assertEquals(frequencyCounter["learning"], doc.termFrequency("learning"))
    }
}
